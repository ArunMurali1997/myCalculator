{"version":3,"sources":["components/Cockpit/Cockpit.js","components/Cockpit/Input.js","components/Cockpit/Clear.js","containers/App.js","reportWebVitals.js","index.js"],"names":["cockpit","props","className","val","classes","children","isNaN","push","join","style","onClick","handleClick","Input","Clear","handleClear","App","useState","inputState","setInputState","previousNumber","setPreviousNumber","operator","setOperator","addToInput","indexOf","parseInt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a10b6a6.chunk.js","sourcesContent":["import \"./Cockpit.css\";\r\n//import classNames from \"classnames\";\r\nconst cockpit = (props) => {\r\n  const isOperator = (val) => !isNaN(val) || val === \".\" || val === \"=\";\r\n  //classname= {classNames(\"Button\", {\r\n  //   \" operator\": !isOperator(props.children) === true,\r\n  // })}\r\n  const style = () => {\r\n    const classes = [\"Button\"];\r\n\r\n    if (!isOperator(props.children)) {\r\n      classes.push(\"operator\");\r\n      return classes.join(\" \");\r\n    }\r\n    return classes;\r\n  };\r\n\r\n  return (\r\n    <div className={style()} onClick={() => props.handleClick(props.children)}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default cockpit;\r\n","import \"./Input.css\";\r\n\r\nconst Input = (props) => {\r\n  // const isOperator = (val) => !isNaN(val) || val === \".\" || val === \"=\";\r\n\r\n  return (\r\n    <div className=\"input\">\r\n      {props.children}\r\n      {/* {props.handleDecimal} */}\r\n    </div>\r\n  );\r\n};\r\nexport default Input;\r\n","import \"./Clear.css\";\r\n\r\nconst Clear = (props) => {\r\n  // const isOperator = (val) => !isNaN(val) || val === \".\" || val === \"=\";\r\n\r\n  return (\r\n    <div className=\"clear\" onClick={props.handleClear}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Clear;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Cockpit from \"../components/Cockpit/Cockpit\";\nimport Input from \"../components/Cockpit/Input\";\nimport Clear from \"../components/Cockpit/Clear\";\nconst App = () => {\n  // const obj = {\n  //   x: \"A\",\n  //   y: \"B\",\n  //   z: \"C\",\n  // };\n  // console.log(obj);\n  // const sample = () => {\n  //   console.log({ ...obj });\n  //   const { x, ...k } = obj;\n  //   const y = x + \"B\";\n  //   console.log(k);\n  //   console.log(y);\n  // };\n  // sample();\n  // console.log(obj.x);\n  const [inputState, setInputState] = useState(\"\");\n  const [previousNumber, setPreviousNumber] = useState(\"\");\n  const [operator, setOperator] = useState(\"\");\n  const addToInput = (val) => setInputState(inputState + val);\n  const addZeroToInput = (val) => {\n    if (inputState !== \"\") {\n      return setInputState(inputState + val);\n    }\n  };\n  const addToClear = () => setInputState(\"\");\n  const addDecimalToIOnput = (val) => {\n    if (inputState.indexOf(\".\") === -1) {\n      return setInputState(inputState + val);\n    }\n  };\n  const add = () => {\n    setPreviousNumber(inputState);\n    setInputState(\"\");\n    setOperator(\"plus\");\n  };\n  const sub = () => {\n    setPreviousNumber(inputState);\n    setInputState(\"\");\n    setOperator(\"minus\");\n  };\n  const div = () => {\n    setPreviousNumber(inputState);\n    setInputState(\"\");\n    setOperator(\"divide\");\n  };\n  const mul = () => {\n    setPreviousNumber(inputState);\n    setInputState(\"\");\n    setOperator(\"multiply\");\n  };\n\n  const evaluate = () => {\n    // eslint-disable-next-line default-case\n    switch (operator) {\n      case \"plus\":\n        setInputState(parseInt(previousNumber) + parseInt(inputState));\n        setOperator(\"\");\n        break;\n      case \"minus\":\n        setInputState(parseInt(previousNumber) - parseInt(inputState));\n        setOperator(\"\");\n        break;\n      case \"divide\":\n        setInputState(parseInt(previousNumber) / parseInt(inputState));\n        setOperator(\"\");\n        break;\n      case \"multiply\":\n        setInputState(parseInt(previousNumber) * parseInt(inputState));\n        setOperator(\"\");\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"calc-wrapper\">\n        <div className=\"row\">\n          <Input>{inputState}</Input>\n        </div>\n        <div className=\"row\">\n          <Cockpit handleClick={addToInput}>7</Cockpit>\n          <Cockpit handleClick={addToInput}>8</Cockpit>\n          <Cockpit handleClick={addToInput}>9</Cockpit>\n          <Cockpit handleClick={div}>/</Cockpit>\n        </div>\n        <div className=\"row\">\n          <Cockpit handleClick={addToInput}>4</Cockpit>\n          <Cockpit handleClick={addToInput}>5</Cockpit>\n          <Cockpit handleClick={addToInput}>6</Cockpit>\n          <Cockpit handleClick={mul}>*</Cockpit>\n        </div>\n        <div className=\"row\">\n          <Cockpit handleClick={addToInput}>1</Cockpit>\n          <Cockpit handleClick={addToInput}>2</Cockpit>\n          <Cockpit handleClick={addToInput}>3</Cockpit>\n          <Cockpit handleClick={add}>+</Cockpit>\n        </div>\n\n        <div className=\"row\">\n          <Cockpit handleClick={addDecimalToIOnput}>.</Cockpit>\n          <Cockpit handleClick={addZeroToInput}>0</Cockpit>\n          <Cockpit handleClick={evaluate}>=</Cockpit>\n          <Cockpit handleClick={sub}>-</Cockpit>\n        </div>\n        <div className=\"row\">\n          <Clear handleClear={addToClear}>Clear</Clear>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}